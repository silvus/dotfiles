--- @module bit32

--- Returns the number `x` shifted `disp` bits to the right. The number `disp` may be any
-- representable integer. Negative displacements shift to the left.
--
-- This shift operation is what is called arithmetic shift. Vacant bits on the left are filled
-- with copies of the higher bit of `x`; vacant bits on the right are filled with zeros. In
-- particular, displacements with absolute values higher than 31 result in zero or `0xFFFFFFFF`
-- (all original bits are shifted out).
--
-- New in Lua 5.2. Deprecated in Lua 5.3.
-- @param x
-- @param disp
-- @function bit32.arshift

--- Returns the bitwise "and" of its operands.
--
-- New in Lua 5.2. Deprecated in Lua 5.3.
-- @param ...
-- @function bit32.band

--- Returns the bitwise negation of `x`. For any integer `x`, the following identity holds:
--
--   assert(bit32.bnot(x) == (-1 - x) % 2^32)
--
-- New in Lua 5.2. Deprecated in Lua 5.3.
-- @param x
-- @function bit32.bnot

--- Returns the bitwise "or" of its operands.
--
-- New in Lua 5.2. Deprecated in Lua 5.3.
-- @param ...
-- @function bit32.bor

--- Returns a boolean signaling whether the bitwise "and" of its operands is different from zero.
--
-- New in Lua 5.2. Deprecated in Lua 5.3.
-- @param ...
-- @function bit32.btest

--- Returns the bitwise "exclusive or" of its operands.
--
-- New in Lua 5.2. Deprecated in Lua 5.3.
-- @param ...
-- @function bit32.xor

--- Returns the unsigned number formed by the bits `field` to `field + width - 1` from `n`. Bits
-- are numbered from 0 (least significant) to 31 (most significant). All accessed bits must be
-- in the range [0, 31].
--
-- The default for `width` is 1.
--
-- New in Lua 5.2. Deprecated in Lua 5.3.
-- @param n
-- @param field
-- @param[opt] width
-- @function bit32.extract

--- Returns a copy of `n` with the bits `field` to `field + width - 1` replaced by the value
-- `v`. See `bit32.extract` for details about `field` and `width`.
--
-- New in Lua 5.2. Deprecated in Lua 5.3.
-- @param n
-- @param v
-- @param field
-- @param[opt] width
-- @function bit32.replace

--- Returns the number `x` rotated `disp` bits to the left. The number `disp` may be any
-- representable integer.
--
-- For any valid displacement, the following identity holds:
--
--   assert(bit32.lrotate(x, disp) == bit32.lrotate(x, disp % 32))
--
-- In particular, negative displacements rotate to the right.
--
-- New in Lua 5.2. Deprecated in Lua 5.3.
-- @param x
-- @param disp
-- @function bit32.lrotate

--- Returns the number `x` shifted `disp` bits to the left. The number `disp` may be any
-- representable integer. Negative displacements shift to the right. In any direction, vacant
-- bits are filled with zeros. In particular, displacements with absolute values higher than
-- 31 result in zero (all bits are shifted out).
--
-- For positive displacements, the following equality holds:
--
--   assert(bit32.lshift(b, disp) == (b * 2^disp) % 2^32)
--
-- New in Lua 5.2. Deprecated in Lua 5.3.
-- @param x
-- @param disp
-- @function bit32.lshift

--- Returns the number `x` rotated `disp` bits to the right. The number `disp` may be any
-- representable integer.
--
-- For any valid displacement, the following identity holds:
--
--   assert(bit32.rrotate(x, disp) == bit32.rrotate(x, disp % 32))
--
-- In particular, negative displacements rotate to the left.
--
-- New in Lua 5.2. Deprecated in Lua 5.3.
-- @param x
-- @param disp
-- @function bit32.rrotate

--- Returns the number `x` shifted `disp` bits to the right. The number `disp` may be any
-- representable integer. Negative displacements shift to the left. In any direction, vacant
-- bits are filled with zeros. In particular, displacements with absolute values higher than
-- 31 result in zero (all bits are shifted out).
--
-- For positive displacements, the following equality holds:
--
--   assert(bit32.rshift(b, disp) == math.floor(b % 2^32 / 2^disp))
--
-- This shift operation is what is called logical shift.
--
-- New in Lua 5.2. Deprecated in Lua 5.3.
-- @param x
-- @param disp
-- @function bit32.rshift
