--- @module utf8

--- The pattern (a string, not a function) "[\0-\x7F\xC2-\xFD][\x80-\xBF]*" (see ยง6.4.1), which
-- matches exactly one UTF-8 byte sequence, assuming that the subject is a valid UTF-8 string.
--
-- New in Lua 5.3.
-- @field charpattern

--- Receives zero or more integers, converts each one to its corresponding UTF-8 byte sequence
-- and returns a string with the concatenation of all these sequences.
--
-- New in Lua 5.3.
-- @param ...
-- @function utf8.char

--- Returns values so that the construction
--
--     for p, c in utf8.codes(s) do *body* end
--
-- will iterate over all UTF-8 characters in string `s`, with `p` being the position (in bytes) and
-- `c` the code point of each character. It raises an error if it meets any invalid byte sequence.
--
-- This function only accepts valid sequences (well formed and not overlong). By default, it only
-- accepts byte sequences that result in valid Unicode code points, rejecting values greater than
-- `10FFFF` and surrogates. The boolean argument `lax` lifts these checks, so that all values
-- up to `0x7FFFFFFF` are accepted. (Not well formed and overlong sequences are still rejected.)
--
-- New in Lua 5.3.
-- @param s
-- @param[opt] lax
-- @function utf8.codes

--- Returns the codepoints (as integers) from all characters in `s` that start between byte
-- position `i` and `j` (both included). The default for `i` is 1 and for `j` is `i`. It raises
-- an error if it meets any invalid byte sequence.
--
-- This function only accepts valid sequences (well formed and not overlong). By default, it only
-- accepts byte sequences that result in valid Unicode code points, rejecting values greater than
-- `10FFFF` and surrogates. The boolean argument `lax` lifts these checks, so that all values
-- up to `0x7FFFFFFF` are accepted. (Not well formed and overlong sequences are still rejected.)
--
-- New in Lua 5.3.
-- @param s
-- @param[opt] i
-- @param[optchain] j
-- @param[optchain] lax
-- @function utf8.codepoint

--- Returns the number of UTF-8 characters in string `s` that start between positions `i` and `j`
-- (both inclusive). The default for `i` is 1 and for `j` is -1. If it finds any invalid byte
-- sequence, returns nil plus the position of the first invalid byte.
--
-- This function only accepts valid sequences (well formed and not overlong). By default, it only
-- accepts byte sequences that result in valid Unicode code points, rejecting values greater than
-- `10FFFF` and surrogates. The boolean argument `lax` lifts these checks, so that all values
-- up to `0x7FFFFFFF` are accepted. (Not well formed and overlong sequences are still rejected.)
--
-- New in Lua 5.3.
-- @param s
-- @param[opt] i
-- @param[optchain] j
-- @param[optchain] lax
-- @function utf8.len

--- Returns the position (in bytes) where the encoding of the `n`-th character of `s` (counting
-- from position `i`) starts. A negative `n` gets characters before position `i`. The default
-- for `i` is 1 when `n` is non-negative and `#s + 1` otherwise, so that `utf8.offset(s, -n)`
-- gets the offset of the `n`-th character from the end of the string. If the specified character
-- is neither in the subject nor right after its end, the function returns nil.
--
-- As a special case, when `n` is 0 the function returns the start of the encoding of the
-- character that contains the `i`-th byte of `s`.
--
-- This function assumes that `s` is a valid UTF-8 string.
--
-- New in Lua 5.3.
-- @param s
-- @param n
-- @param[opt] i
-- @function utf8.offset
