--- @module table

--- Given a list where all elements are strings or numbers, returns the string
-- `list[i]..sep..list[i+1] ··· sep..list[j]`. The default value for `sep` is the empty
-- string, the default for `i` is 1, and the default for `j` is `#list`. If `i` is greater than
-- `j`, returns the empty string.
-- @param list
-- @param[opt] sep
-- @param[optchain] i
-- @param[optchain] j
-- @function table.concat

--- Inserts element `value` at position `pos` in `list`, shifting up the elements `list[pos],
-- list[pos+1], ···, list[#list]`. The default value for `pos` is `#list+1`, so that a call
-- `table.insert(t,x)` inserts `x` at the end of the list `t`.
-- @param list
-- @param[opt] pos
-- @param value
-- @function table.insert

--- Returns the largest positive numerical index of the given table, or zero if the table has
-- no positive numerical indices. (To do its job this function does a linear traversal of the
-- whole table.)
--
-- Deprecated in Lua 5.2.
-- @param table
-- @function table.maxn

--- Moves elements from the table `a1` to the table `a2`, performing the equivalent to the
-- following multiple assignment: `a2[t], ··· = a1[f], ···, a1[e]`. The default for `a2`
-- is `a1`. The destination range can overlap with the source range. Index `f` must be positive.
--
-- Returns the destination table `a2`.
--
-- New in Lua 5.3.
-- @param a1
-- @param f
-- @param e
-- @param t
-- @param[opt] a2
-- @function table.move

--- Returns a new table with all parameters stored into keys 1, 2, etc. and with a field "`n`"
-- with the total number of parameters. Note that the resulting table may not be a sequence,
-- if some arguments are nil.
--
-- New in Lua 5.2.
-- @param ...
-- @function table.pack

--- Removes from `list` the element at position `pos`, returning the value of the removed
-- element. When `pos` is an integer between 1 and `#list`, it shifts down the elements
-- `list[pos+1], list[pos+2], ···, list[#list]` and erases element `list[#list]`; The index
-- `pos` can also be 0 when `#list` is 0, or `#list + 1`.
--
-- The default value for `pos` is `#list`, so that a call `table.remove(l)` removes the last
-- element of the list `l`.
-- @param list
-- @param[opt] pos
-- @function table.remove

--- Sorts the list elements in a given order, *in-place*, from `list[1]` to `list[#list]`. If
-- `comp` is given, then it must be a function that receives two list elements and returns true
-- when the first element must come before the second in the final order (so that, after the
-- sort, `i < j` implies `not comp(list[j],list[i])` will be true after the sort). If `comp`
-- is not given, then the standard Lua operator `<` is used instead.
--
-- Note that the `comp` function must not define a string partial order over the elements in the
-- list; that is, it must be asymmetric and transitive. Otherwise, no valid sort may be possible.
--
-- The sort algorithm is not stable; that is, elements not comparable by the given order (e.g.,
-- equal elements) may have their relative positions changed by the sort.
-- @param list
-- @param[opt] comp
-- @function table.sort

--- Returns the elements from the given list. This function is equivalent to
--
--   return list[i], list[i+1], ···, list[j]
--
-- By default, `i` is 1 and `j` is `#list`.
--
-- New in Lua 5.2.
-- @param list
-- @param[opt] i
-- @param[optchain] j
-- @function table.unpack
