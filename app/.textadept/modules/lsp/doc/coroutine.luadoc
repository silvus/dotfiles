--- @module coroutine

--- Closes coroutine `co`, that is, closes all its pending to-be-closed variables and puts the
-- coroutine in a dead state. The given coroutine must be dead or suspended. In case of error
-- closing some variable, returns false plus the error object; otherwise returns true.
-- @param co
-- @function coroutine.close

--- Creates a new coroutine, with body `f`. `f` must be a Lua function. Returns this new coroutine,
-- an object with type `"thread"`.
-- @param f
-- @function coroutine.create

--- Returns true when the coroutine `co` can yield. The default for `co` is the running coroutine.
--
-- A coroutine is yieldable if it is not the main thread and it is not inside a non-yieldable
-- C function.
--
-- New in Lua 5.3.
-- @param[opt] co
-- @function coroutine.isyieldable

--- Starts or continues the execution of coroutine `co`. The first time you resume a coroutine,
-- it starts running its body. The values `val1`, ··· are passed as the arguments to the body
-- function. If the coroutine has yielded, `resume` restarts it; the values `val1`, ··· are
-- passed as the results from the yield.
--
-- If the coroutine runs without any errors, `resume` returns true plus any values passed to
-- `yield` (when the coroutine yields) or any values returned by the body function (when the
-- coroutine terminates). If there is any error, `resume` returns false plus the error message.
-- @param co
-- @param[opt] val1
-- @param[optchain] ...
-- @function coroutine.resume

--- Returns the running coroutine plus a boolean, true when the running coroutine is the main one.
-- @function coroutine.running

--- Returns the status of the coroutine `co`, as a string: `"running"`, if the coroutine is
-- running (that is, it is the one that called `status`); `"suspended"`, if the coroutine
-- is suspended in a call to `yield`, or if it has not started running yet; `"normal"` if the
-- coroutine is active but not running (that is, it has resumed another coroutine); and `"dead"`
-- if the coroutine has finished its body function, or if it has stopped with an error.
-- @param co
-- @function coroutine.status

--- Creates a new coroutine, with body `f`; `f` must be a Lua function. Returns a function that
-- resumes the coroutine each time it is called. Any arguments passed to this function behave as
-- the extra arguments to `resume`. The function returns the same values returned by `resume`,
-- except the first boolean. In case of error, the function closes the coroutine and propagates
-- the error.
-- @param f
-- @function coroutine.wrap

--- Suspends the execution of the calling coroutine. Any arguments to `yield` are passed as
-- extra results to `resume`.
-- @param ...
-- @function coroutine.yield
