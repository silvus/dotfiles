--- @module math

--- The float value `HUGE_VAL`, a value greater than any other numerical value.
-- @field huge

--- An integer with the maximum value for an integer.
--
-- New in Lua 5.3.
-- @field maxinteger

--- An integer with the minimum value for an integer.
--
-- New in Lua 5.3.
-- @field mininteger

--- The value of 'Ï€'.
-- @field pi

--- Returns the maximum value between `x` and `-x`. (integer/float)
-- @param x
-- @function math.abs

--- Returns the arc cosine of `x` (in radians).
-- @param x
-- @function math.acos

--- Returns the arc sine of `x` (in radians).
-- @param x
-- @function math.asin

--- Returns the arc tangent of `y/x` (in radians), but uses the signs of both parameters to find
-- the quadrant of the result. It also handles correctly the case of `x` being zero.
--
-- The default value for `x` is 1, so that the call `math.atan(y)` returns the arc tangent of `y`.
-- @param y
-- @param[opt] x
-- @function math.atan

--- Returns the arc tangent of `y/x` (in radians), using the signs of both parameters to find
-- the quadrant of the result. (It also handles correctly the case of `x` being zero.)
--
-- Deprecated in Lua 5.3.
-- @param y
-- @param x
-- @function math.atan2

--- Returns the smallest integral value greater than or equal to `x`.
-- @param x
-- @function math.ceil

--- Returns the cosine of `x` (assumed to be in radians).
-- @param x
-- @function math.cos

--- Returns the hyperbolic cosine of `x`.
--
-- Deprecated in Lua 5.3.
-- @param x
-- @function math.cosh

--- Converts the angle `x` from radians to degrees.
-- @param x
-- @function math.deg

--- Returns the value *e^x*.
-- @param x
-- @function math.exp

--- Returns the largest integral value less than or equal to `x`.
-- @param x
-- @function math.floor

--- Returns the remainder of the division of `x` by `y` that rounds the quotient towards
-- zero. (integer/float)
-- @param x
-- @param y
-- @function math.fmod

--- Returns `m` and `e` such that 'x = m2^e', `e` is an integer and the absolute value of `m`
-- is in the range *[0.5, 1)* (or zero when `x` is zero).
--
-- Deprecated in Lua 5.3.
-- @param x
-- @function math.frexp

--- Returns 'm2^e' (`e` should be an integer).
--
-- Deprecated in Lua 5.3.
-- @param m
-- @param e
-- @function math.ldexp

--- Returns the logarithm of `x` in the given base. The default for `base` is 'e' (so that the
-- function returns the natural logarithm of `x`).
-- @param x
-- @param[opt] base
-- @function math.log

--- Returns the base-10 logarithm of `x`.
--
-- Deprecated in Lua 5.2.
-- @param x
-- @function math.log10

--- Returns the argument with the maximum value, according to the Lua operator `<`.
-- @param x
-- @param ...
-- @function math.max

--- Returns the argument with the minimum value, according to the Lua operator `<`.
-- @param x
-- @param ...
-- @function math.min

--- Returns the integral part of `x` and the fractional part of `x`. Its second result is always
-- a float.
-- @param x
-- @function math.modf

--- Returns *x^y*. (You can also use the expression `x^y` to compute this value.)
--
-- Deprecated in Lua 5.3.
-- @param x
-- @param y
-- @function math.pow

--- Converts the angle `x` from degrees to radians.
-- @param x
-- @function math.rad

--- When called without arguments, returns a pseudo-random float with uniform distribution in the
-- range [0,1). When called with two integers `m` and `n`, `math.random` returns a pseudo-random
-- integer with uniform distribution in the range `[m, n]. The call `math.random(n)`, for a
-- positive `n`, is equivalent to `math.random(1,n)`. The call `math.random(0)` produces an
-- integer with all bits (pseudo)random.
--
-- This function uses the `xoshiro256**` algorithm to produce pseudo-random 64-bit integers,
-- which are the results of calls with argument 0. Other results (ranges and floats) are unbiased
-- extracted from these integers.
--
-- Lua initializes its pseudo-random generator with the equivalent of a call to `math.randomseed`
-- with no arguments, so that `math.random` should generate different sequences of results each
-- time the program runs.
-- @param[opt] m
-- @param[optchain] n
-- @function math.random

--- When called with at least one argument, the integer parameters `x` and `y` are joined into a
-- 128-bit *seed* that is used to reinitialize the pseudo-random generator; equal seeds produce
-- equal sequences of numbers. The default for `y` is zero.
--
-- When called with no arguments, Lua generates a seed with a weak attempt for randomness.
--
-- This function returns the two seed components that were effectively used, so that setting
-- them again repeats the sequence.
--
-- To ensure a required level of randomness to the initial state (or contrarily, to have
-- a deterministic sequence, for instance when debugging a program), you should call
-- `math.randomseed` with explicit arguments.
-- @param[opt] x
-- @param[optchain] y
-- @function math.randomseed

--- Returns the sine of `x` (assumed to be in radians).
-- @param x
-- @function math.sin

--- Returns the hyperbolic sine of `x`.
--
-- Deprecated in Lua 5.3.
-- @param x
-- @function math.sinh

--- Returns the square root of `x`. (You can also use the expression `x^0.5` to compute this
-- value.)
-- @param x
-- @function math.sqrt

--- Returns the tangent of `x` (assumed to be in radians).
-- @param x
-- @function math.tan

--- Returns the hyperbolic tangent of `x`.
--
-- Deprecated in Lua 5.3.
-- @param x
-- @function math.tanh

--- If the value `x` is convertible to an integer, returns that integer. Otherwise, returns nil.
--
-- New in Lua 5.3.
-- @param x
-- @function math.tointeger

--- Returns "integer" if `x` is an integer, "float" if it is a float, or nil if x is not a number.
--
-- New in Lua 5.3.
-- @param x
-- @function math.type

--- Returns a boolean, true if integer `m` is below integer `n` when they are compared as
-- unsigned integers.
--
-- New in Lua 5.3.
-- @param m
-- @param n
-- @function math.ult
