--- @module _G

--- A global variable (not a function) that holds the global environment (see §2.2). Lua itself
-- does not use this variable; changing its value does not affect any environment, nor vice versa.
-- @table _G

--- A global variable (not a function) that holds a string containing the running Lua version. The
-- current value of this variable is "`Lua 5.4`".
-- @field _VERSION

--- Raises an error if the value of its argument `v` is false (i.e., nil or false); otherwise,
-- returns all its arguments. In case of error, `message` is the error object; when absent,
-- it defaults to "assertion failed!".
-- @param v
-- @param[opt] message
-- @function assert

--- This function is a generic interface to the garbage collector. It performs different functions
-- according to its first argument, `opt`:
--   "collect": performs a full garbage-collection cycle. This is the default option.
--   "stop": stops automatic execution of the garbage collector.
--   "restart": restarts automatic execution of the garbage collector.
--   "count": returns the total memory in use by Lua in Kbytes. The value has a fractional part,
--     so that it multiplied by 1024 gives the exact number of bytes in use by Lua.
--   "step": performs a garbage-collection step. The step "size" is controlled by `arg`. With a
--     zero value, the collector will perform one basic (indivisible) step. For non-zero values,
--     the collector will perform as if that amount of memory (in Kbytes) had been allocated
--     by Lua. Returns true if the step finished a collection cycle.
--   "isrunning": returns a boolean that tells whether the collector is running (i.e., not
--     stopped).
--   "incremental": change the collector mode to incremental. This option can be followed
--     by three numbers: the garbage-collector pause, the step multiplier, and the step size
--     (see §2.5.1). A zero means to not change that value.
--   "generational": change the collector mode to generational. This option can be followed
--     by two numbers: the garbage-collector minor multiplier and the major multiplier (see
--     §2.5.2). A zero means to not change that value.
--
-- See §2.5 for more details about garbage collection and some of these options.
-- @param[opt] opt
-- @param[optchain] arg
-- @function collectgarbage

--- Opens the named file and executes its content as a Lua chunk. When called without arguments,
-- `dofile` executes the content of the standard input (`stdin`). Returns all values returned
-- by the chunk. In case of errors, `dofile` propagates the error to its caller. (That is,
-- `dofile` does not run in protected mode.)
-- @param[opt] filename
-- @function dofile

--- Raises an error (see §2.3) with `message` as the error object. This function never returns.
--
-- Usually, `error` adds some information about the error position at the beginning of the
-- message, if the message is a string. The `level` argument specifies how to get the error
-- position. With level 1 (the default), the error position is where the `error` function
-- was called. Level 2 points the error to where the function that called `error` was called;
-- and so on. Passing a level 0 avoids the addition of error position information to the message.
-- @param message
-- @param[opt] level
-- @function error

--- Returns the current environment in use by the function. `f` can be a Lua function or a
-- number that specifies the function at that stack level: Level 1 is the function calling
-- `getfenv`. If the given function is not a Lua function, or if `f` is 0, `getfenv` returns
-- the global environment. The default for `f` is 1.
--
-- Deprecated in Lua 5.2.
-- @param[opt] f
-- @function getfenv

--- If `object` does not have a metatable, returns nil. Otherwise, if the object's metatable
-- has a `__metatable` field, returns the associated value. Otherwise, returns the metatable
-- of the given object.
-- @param object
-- @function getmetatable

--- Returns three values (an iterator function, the table `t`, and 0) so that the construction
--
--   for i,v in ipairs(t) do *body* end
--
-- will iterate over the key-value pairs (`1,t[1]`), (`2,t[2]`), ···, up to the first
-- absent index.
-- @param t
-- @function ipairs

--- Loads a chunk.
--
-- If `chunk` is a string, the chunk is this string. If `chunk` is a function, `load` calls
-- it repeatedly to get the chunk pieces. Each call to `chunk` must return a string that
-- concatenates with previous results. A return of an empty string, nil, or no value signals
-- the end of the chunk.
--
-- If there are no syntactic errors, `load` returns the compiled chunk as a function; otherwise,
-- it returns nil plus the error message.
--
-- When you load a main chunk, the resulting function will always have exactly one upvalue, the
-- `_ENV` variable (see §2.2). However, when you load a binary chunk created from a function
-- (see `string.dump`), the resulting function can have an arbitrary number of upvalues,
-- and there is no guarantee that its first upvalue will be the `_ENV` variable. (A non-main
-- function may not even have an `_ENV` upvalue.)
--
-- Regardless, if the resulting function has any upvalues, its first upvalue is set to the
-- value of `env`, if that parameter is given, or to the value of the global environment. Other
-- upvalues are initialized with nil. All upvalues are fresh, that is, they are not shared with
-- any other function.
--
-- `chunkname` is used as the name of the chunk for error messages and debug information (see
-- §4.7). When absent, it defaults to `chunk`, if `chunk` is a string, or to "`=(load)`"
-- otherwise.
--
-- The string `mode` controls whether the chunk can be text or binary (that is, a precompiled
-- chunk). It may be the string "`b`" (only binary chunks), "`t`" (only text chunks), or "`bt`"
-- (both binary and text). The default is "`bt`".
--
-- It is safe to load malformed binary chunks; `load` signals an appropriate error. However,
-- Lua does not check the consistency of the code inside binary chunks; running maliciously
-- crafted bytecode can crash the interpreter.
-- @param chunk
-- @param[opt] chunkname
-- @param[optchain] mode
-- @param[optchain] env
-- @function load

--- Similar to `load`, but gets the chunk from file `filename` or from the standard input,
-- if no file name is given.
-- @param[opt] filename
-- @param[optchain] mode
-- @param[optchain] env
-- @function loadfile

--- Similar to `load`, but gets the chunk from the given string. To load and run a given string,
-- use the idiom assert(loadstring(s))() When absent, `chunkname` defaults to the given string.
--
-- Deprecated in Lua 5.2.
-- @param string
-- @param[opt] chunkname
-- @function loadstring

--- Creates a module. If there is a table in `package.loaded[name]`, this table is the
-- module. Otherwise, if there is a global table `t` with the given name, this table is the
-- module. Otherwise creates a new table `t` and sets it as the value of the global `name`
-- and the value of `package.loaded[name]`. This function also initializes `t._NAME` with the
-- given name, `t._M` with the module (`t` itself), and `t._PACKAGE` with the package name
-- (the full module name minus last component; see below). Finally, `module` sets `t` as the
-- new environment of the current function and the new value of `package.loaded[name]`, so that
-- `require` returns `t`. If `name` is a compound name (that is, one with components separated
-- by dots), `module` creates (or reuses, if they already exist) tables for each component. For
-- instance, if `name` is `a.b.c`, then `module` stores the module table in field `c` of field
-- `b` of global `a`. This function can receive optional *options* after the module name,
-- where each option is a function to be applied over the module.
--
-- Deprecated in Lua 5.2.
-- @param name
-- @param[opt] ...
-- @function module

--- Allows a program to traverse all fields of a table. Its first argument is a table and its
-- second argument is an index in this table. A call to `next` returns the next index of the
-- table and its associated value. When called with nil as its second argument, `next` returns
-- an initial index and its associated value. When called with the last index, or with nil in
-- an empty table, `next` returns nil. If the second argument is absent, then it is interpreted
-- as nil. In particular, you can use `next(t)` to check whether a table is empty.
--
-- The order in which the indices are enumerated is not specified, *even for numeric indices*. (To
-- traverse a table in numeric order, use a numerical `for`.)
--
-- The behavior of `next` is undefined if, during the traversal, you assign any value to a
-- non-existent field in the table. You may however modify existing fields. In particular,
-- you may set existing fields to nil.
-- @param table
-- @param[opt] index
-- @function next

--- If `t` has a metamethod `__pairs`, calls it with `t` as argument and returns the first three
-- results from the call.
--
-- Otherwise, returns three values: the `next` function, the table `t`, and nil, so that the
-- construction
--
--   for k,v in pairs(t) do *body* end
--
-- will iterate over all key–value pairs of table `t`.
--
-- See function `next` for the caveats of modifying the table during its traversal.
-- @param t
-- @function pairs

--- Calls the function `f` with the given arguments in *protected mode*. This means that any
-- error inside `f` is not propagated; instead, `pcall` catches the error and returns a status
-- code. Its first result is the status code (a boolean), which is true if the call succeeds
-- without errors. In such case, `pcall` also returns all results from the call, after this
-- first result. In case of any error, `pcall` returns false plus the error object. Note that
-- errors caught by `pcall` do not call a message handler.
-- @param f
-- @param[opt] arg1
-- @param[optchain] ...
-- @function pcall

--- Receives any number of arguments and prints their values to `stdout`, converting each
-- argument to a string following the same rules of `tostring`.
--
-- The function `print` is not intended for formatted output, but only as a quick way to show a
-- value, for instance for debugging. For complete control over the output, use `string.format`
-- and `io.write`.
-- @param ...
-- @function print

--- Checks whether `v1` is equal to `v2`, without invoking the `__eq` metamethod. Returns
-- a boolean.
-- @param v1
-- @param v2
-- @function rawequal

--- Gets the real value of `table[index]`, without using the `__index` metavalue. `table` must
-- be a table; `index` may be any value.
-- @param table
-- @param index
-- @function rawget

--- Returns the length of the object `v`, which must be a table or a string, without invoking the
-- `__len` metamethod. Returns an integer.
--
-- New in Lua 5.2.
-- @param v
-- @function rawlen

--- Sets the real value of `table[index]` to `value`, without using the `__newindex`
-- metavalue. `table` must be a table, `index` any value different from nil and NaN, and `value`
-- any Lua value.
--
-- This function returns `table`.
-- @param table
-- @param index
-- @param value
-- @function rawset

--- Sets the environment to be used by the given function. `f` can be a Lua function or a
-- number that specifies the function at that stack level: Level 1 is the function calling
-- `setfenv`. `setfenv` returns the given function. As a special case, when `f` is 0 `setfenv`
-- changes the environment of the running thread. In this case, `setfenv` returns no values.
--
-- Deprecated in Lua 5.2.
-- @param f
-- @param table
-- @function setfenv

--- If `index` is a number, returns all arguments after argument number `index`; a negative number
-- indexes from the end (-1 is the last argument). Otherwise, `index` must be the string `"#"`,
-- and `select` returns the total number of extra arguments it received.
-- @param index
-- @param ...
-- @function select

--- Sets the metatable for the given table. If `metatable` is nil, removes the metatable of the
-- given table. If the original metatable has a `__metatable` field, raises an error.
--
-- This function returns `table`.
--
-- To change the metatable of other types from Lua code, you must use the debug library
-- (see §6.10).
-- @param table
-- @param metatable
-- @function setmetatable

--- When called with no `base`, `tonumber` tries to convert its argument to a number. If the
-- argument is already a number or a string convertible to a number, then `tonumber` returns
-- this number; otherwise, it returns nil.
--
-- The conversion of strings can result in integers or floats, according to the lexical
-- conventions of Lua (see §3.1). The string may have leading and trailing spaces and a sign.
--
-- When called with `base`, then `e` must be a string to be interpreted as an integer numeral
-- in that base. The base may be any integer between 2 and 36, inclusive. In bases above 10,
-- the letter '`A`' (in either upper or lower case) represents 10, '`B`' represents 11, and so
-- forth, with '`Z`' representing 35. If the string `e` is not a valid numeral in the given base,
-- the function returns nil
-- @param e
-- @param[opt] base
-- @function tonumber

--- Receives a value of any type and converts it to a string in a human-readable format. Floats
-- always produce strings with some floating-point indication (either a decimal dot or an
-- exponent).
--
-- If the metatable of `v` has a `__tostring` field, then `tostring` calls the corresponding
-- value with `v` as argument, and uses the result of the call as its result. Otherwise, if the
-- metatable of `v` has a `__name` field with a string value, `tostring` may use that string
-- in its final result.
--
-- For complete control of how numbers are converted, use `string.format`.
-- @param v
-- @function tostring

--- Returns the type of its only argument, coded as a string. The possible results of this
-- function are " `nil`" (a string, not the value nil), "`number`", "`string`", "`boolean`",
-- "`table`", "`function`", "`thread`", and "`userdata`".
-- @param v
-- @function type

--- Returns the elements from the given table. This function is equivalent to return list[i],
-- list[i+1], ···, list[j] except that the above code can be written only for a fixed number
-- of elements. By default, `i` is 1 and `j` is the length of the list, as defined by the length
-- operator (see §2.5.5).
--
-- Deprecated in Lua 5.2.
-- @param list
-- @param[opt] i
-- @param[optchain] j
-- @function unpack

--- Emits a warning with a message composed by the concatenation of all its arguments (which
-- should be strings).
--
-- By convention, a one-piece message starting with '`@`' is intended to be a *control message*,
-- which is a message to the warning system itself. In particular, the standard warning function in
-- Lua recognizes the control messages "`@off`", to stop the emission of warnings, and "`@on`",
-- to (re)start the emission; it ignores unknown control messages.
--
-- New in Lua 5.4.
-- @param msg1
-- @param ...
-- @function warn

--- This function is similar to `pcall`, except that it sets a new message handler `msgh`.
-- @param f
-- @param msgh
-- @param[opt] arg1
-- @param[optchain] ...
-- @function xpcall
