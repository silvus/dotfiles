#!/usr/bin/env python3

import os
import sys
import subprocess
import time
import shlex
import shutil
import logging
from pathlib import Path
import argparse

__author__ = "Silvus"
__version__ = "2025.02"

HISTORY_TRACK = Path.home() / ".tmux_sessionizer_history"
MAX_HISTORY_SIZE = 100

PATH_SCRIPT = os.path.basename(__file__)

DEBUG = False

# Logs
logging.basicConfig(
    stream=sys.stdout, level=logging.INFO, format="[%(levelname)s] %(message)s"
)
log = logging.getLogger(PATH_SCRIPT)


def is_tmux_running():
    result = subprocess.run(["pgrep", "tmux"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    return result.returncode == 0


def get_project_paths():
    paths = []

    # Simple paths
    for path in ["/data/doc/todo.org", "~/.dotfiles", "/data/doc", "/data/work"]:
        expanded_path = os.path.expanduser(path)
        if os.path.isfile(expanded_path) or os.path.isdir(expanded_path):
            paths.append(expanded_path)

    # Scanned path
    for base_path in ["/data/dev", "/data/prod", "/data/projects"]:
        path_obj = Path(base_path)
        if path_obj.is_dir():
            depth = 1 if base_path != "/data/projects" else 2
            paths.extend(str(p) for p in path_obj.glob(f"{'*/' * depth}"))
    return paths


def get_prioritized_paths(all_paths):
    history_entries = {}

    if HISTORY_TRACK.exists():
        with open(HISTORY_TRACK, "r") as file:
            for line in file:
                timestamp, path = line.strip().split(maxsplit=1)
                history_entries[path] = int(timestamp)

    # Sort paths by last usage timestamp, defaulting to 0 if not in history
    return sorted(all_paths, key=lambda p: history_entries.get(p, 0), reverse=True)


def deduplicate_history():
    if not HISTORY_TRACK.exists():
        return

    seen = set()
    unique_entries = []

    with open(HISTORY_TRACK, "r") as file:
        for line in reversed(file.readlines()):
            _, path = line.strip().split(maxsplit=1)
            if path not in seen:
                seen.add(path)
                unique_entries.append(line)

    unique_entries.reverse()

    with open(HISTORY_TRACK, "w") as file:
        file.writelines(unique_entries)


def limit_history_size():
    if not HISTORY_TRACK.exists():
        return

    with open(HISTORY_TRACK, "r") as file:
        lines = file.readlines()

    if len(lines) > MAX_HISTORY_SIZE:
        with open(HISTORY_TRACK, "w") as file:
            file.writelines(lines[-MAX_HISTORY_SIZE:])


def run_fzf(paths):
    fzf_path = shutil.which("fzf")
    if not fzf_path:
        fzf_path = Path.home() / ".fzf/bin/fzf"
        if not fzf_path.exists():
            log.error(f"fzf not found at expected path {fzf_path}")
            return None

    # Display a tilde for clarity.
    paths = [s.replace(Path.home().absolute().as_posix(), '~') for s in paths]
    
    process = subprocess.Popen([fzf_path, '--tmux'], stdin=subprocess.PIPE, stdout=subprocess.PIPE)
    stdout, _ = process.communicate(input="\n".join(paths).encode())
    return os.path.expanduser(stdout.decode().strip())


def init_cli_arg():
    """Parse args"""
    parser = argparse.ArgumentParser(description="Sessionizer script for TMUX")
    parser.add_argument(
        "-v",
        "--version",
        action="version",
        version="%(prog)s {0}".format(__version__),
        help="show program's version number and exit",
    )
    parser.add_argument(
        "-d", "--debug", action="store_true", help="Debug flag", default=DEBUG
    )
    parser.add_argument("-s", "--session-mode", action="store_true", help="Start in session mode")
    parser.add_argument("-p", "--project", help="Open a project in a non interactive way")

    return parser.parse_args()


def main():
    global DEBUG

    # Parse args
    args = init_cli_arg()
    DEBUG = args.debug
    session_mode = args.session_mode
    project = args.project

    log.setLevel(logging.DEBUG if DEBUG else logging.INFO)

    try:
        log.debug("start")
        log.debug(args)

        if not is_tmux_running():
            log.error("Tmux is not running")
            return

        project_paths = get_project_paths()
        prioritized_paths = get_prioritized_paths(project_paths)

        if project:
            selected = project
        else:
            # Launch fzf
            selected = run_fzf(prioritized_paths)

        if not selected:
            log.debug('No selection to open')
            return
        
        tmux_open_command = ''
        if os.path.isfile(selected):
            tmux_open_command = "{} \"{}\"".format(os.getenv('EDITOR', shutil.which('vim')), selected)
        elif not os.path.isdir(selected):
            log.error(f'Selected projet does not exit {selected}')
            return

        selected_name = os.path.basename(selected).replace(".", "_").replace(" ", "_")

        # Log selection to HISTORY_TRACK with the current timestamp
        with open(HISTORY_TRACK, "a") as file:
            file.write(f"{int(time.time())} {selected}\n")

        # Remove duplicates and limit history size
        deduplicate_history()
        limit_history_size()

        if session_mode:
            # Session mode
            session_check_cmd = ["tmux", "has-session", f"-t={selected_name}"]
            session_exists = subprocess.run(session_check_cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE).returncode == 0

            if not session_exists:
                if tmux_open_command:
                    subprocess.run(["tmux", "new-session", "-n", selected_name, "-ds", selected_name, "-c", os.path.dirname(selected), tmux_open_command], check=False)
                else:
                    subprocess.run(["tmux", "new-session", "-n", selected_name, "-ds", selected_name, "-c", selected], check=False)
            subprocess.run(["tmux", "switch-client", "-t", selected_name], check=False)
        else:
            # Window mode
            # Check if a window with the selected name exists
            window_list_cmd = ["tmux", "list-windows", "-F", "#W"]
            window_list = subprocess.run(window_list_cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            window_names = window_list.stdout.decode().splitlines()
            if selected_name not in window_names:
                if tmux_open_command:
                    subprocess.run(["tmux", "new-window", "-t", "main", "-n", selected_name, "-c", os.path.dirname(selected), tmux_open_command], check=False)
                else:
                    subprocess.run(["tmux", "new-window", "-t", "main", "-n", selected_name, "-c", selected], check=False)

            subprocess.run(["tmux", "select-window", "-t", selected_name], check=False)
            subprocess.run(["tmux", "switch-client", "-t", "main"], check=False)

        log.debug("end")

    except Exception as exc:
        log.error(exc)
        if DEBUG:
            raise

    except KeyboardInterrupt:
        sys.exit(1)


if __name__ == "__main__":
    sys.exit(main())
