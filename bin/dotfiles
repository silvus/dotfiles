#!/usr/bin/env python3
"""
Setup dotfiles
"""

import argparse
import filecmp
import os
import shutil
import socket
import sys
from subprocess import Popen, PIPE

# --------------------------------------------------------------------
# Prints (with colors)
# --------------------------------------------------------------------

COLOR_RESET = "\033[0m"
COLOR_RED = "\033[31m"
COLOR_GREEN = "\033[32m"
COLOR_YELLOW = "\033[33m"
COLOR_BLUE = "\033[34m"


def print_header(message):
    print("\n" + COLOR_BLUE + "▶ " + COLOR_RESET + message)


def print_success(message):
    print(COLOR_GREEN + "    ✔ " + COLOR_RESET + message)


def print_progress(count, total):
    bar_length: int = 40
    percent = int(round((count / total) * 100))
    nb_bar_fill = int(round((bar_length * percent) / 100))
    bar_fill = "=" * nb_bar_fill
    bar_empty = " " * (bar_length - nb_bar_fill)
    symbol = COLOR_BLUE + "➤" + COLOR_RESET
    if count == total:
        symbol = COLOR_GREEN + "✔" + COLOR_RESET

    sys.stdout.write(
        "\r    {} [{}] {}/{}".format(symbol, str(bar_fill + bar_empty), count, total)
    )
    sys.stdout.flush()


def print_info(message):
    print(COLOR_BLUE + "    ➤ " + COLOR_RESET + message)


def print_warning(message):
    print(COLOR_YELLOW + "    ⚠ " + COLOR_RESET + message)


def print_error(message):
    print(COLOR_RED + "    ✖ " + COLOR_RESET + message)


# --------------------------------------------------------------------
# Helpers
# --------------------------------------------------------------------


def assure_dir_exist(path):
    """Create parents folders for file path"""
    dir_path = os.path.dirname(os.path.expanduser(path))
    if not os.path.exists(dir_path):
        try:
            os.makedirs(dir_path)
        except OSError as exc:
            print_error("{}".format(exc))


def exec_command(command, show_errors=True):
    """Execute a system command"""
    p = Popen(command, stdout=PIPE, stderr=PIPE)
    _, errors = p.communicate()

    if p.returncode != 0 and show_errors:
        print_error(errors.decode("UTF-8"))

    return p.returncode == 0


def check_requirements():
    """
    Exit if git isn't installed
    """
    # Need git
    if not shutil.which("git"):
        print_error("Git is missing. Aborting.")
        sys.exit(2)


def check_network():
    """
    Return False if Github isn't reachable
    """
    # Github access
    try:
        # DNS listening
        host = socket.gethostbyname("github.com")
        # Host is actually reachable
        socket.create_connection((host, 80), 2)
        return True
    except (socket.gaierror, socket.timeout, OSError) as e:
        print_error(f"Github can't be reached, no update: {e}")

    return False


def x_is_installed():
    """
    Try to guess if x is installed
    """
    return shutil.which("startx") or shutil.which("lightdm") or shutil.which("tuigreet") or shutil.which("awesome") or shutil.which("sway") or shutil.which("Xwayland") or os.environ.get("XDG_SESSION_TYPE") == "wayland"


def count_files(root_folder):
    """
    Recursive count files in rootFolder
    """
    total = 0
    for _, _, files in os.walk(root_folder):
        total += len(files)
    return total


def copy_if_not_exist(source, destination):
    """
    Copy file if destination doesn't exist
    """
    if not os.path.exists(destination):
        assure_dir_exist(destination)
        return shutil.copy(source, destination)
    return True


def copy_has_root(source, destination):
    """
    Copy file has root. Use cp to not launch this script has root
    """
    return exec_command(["sudo", "cp", source, destination])


# --------------------------------------------------------------------
# Symlinks
# --------------------------------------------------------------------


def symlink_arbo(root_source, root_destination):
    """
    Scan "app" directory and create an equivalent symlink
    in home for each file.
    If X server is installed, scan also "appdesktop"
    """
    count = 0
    total = count_files(root_source)

    for dir_name, _, file_list in os.walk(root_source):
        for filename in file_list:
            # Get relative dir from dotfiles root
            relative_dir = os.path.relpath(dir_name, root_source)
            # Add file name and handle "." (with normpath)
            relative_file = os.path.normpath(os.path.join(relative_dir, filename))

            # Create absolutes paths
            source = os.path.join(root_source, relative_file)
            destination = os.path.join(root_destination, relative_file)

            count += 1
            if not symlink(source, destination):
                print_error("Error copying {}".format(source))
                return False

            # Update the same line each time
            print_progress(count, total)

    print()
    return True


def symlink(src, dest):
    """
    Make a symlink
    """
    # Remove existing symlink
    if os.path.lexists(dest):
        os.remove(dest)
    # Check if source exist
    if os.path.exists(src):
        # Create directories if necessary
        assure_dir_exist(dest)
        # Make symlink
        os.symlink(src, dest)
        return True
    else:
        print_error(src + " doesn't exist")
        return False


# --------------------------------------------------------------------
# Copy
# --------------------------------------------------------------------


def copy_arbo(root_source, root_destination):
    """
    Scan dotfiles directory and create an equivalent file copy in home for each file.
    """
    count = 0
    total = count_files(root_source)

    for dir_name, _, file_list in os.walk(root_source):
        for filename in file_list:
            # Get relative dir from dotfiles root
            relative_dir = os.path.relpath(dir_name, root_source)
            # Add file name and handle "." (with normpath)
            relative_file = os.path.normpath(os.path.join(relative_dir, filename))

            # Create absolutes paths
            source = os.path.join(root_source, relative_file)
            destination = os.path.join(root_destination, relative_file)

            if copy_if_not_exist(source, destination):
                count += 1
            else:
                print_error("Error copying {}".format(source))
                return False

            # Update the same line each time
            print_progress(count, total)

    print()
    return True


def copy_files_has_root(source_path_root, files_target=None):
    """
    Copy each dotfiles path in filesSource to a root counterpart, event if exist.
    filesSource is a list of absolutes file paths.
    sourcePathRoot is the absolute dotfiles path.
    """
    if files_target is None:
        files_target = []

    for file_target in files_target:
        # Get relative dir from dotfiles root
        file_source = os.path.normpath(
            os.path.join(source_path_root, file_target.strip("/"))
        )

        # Copy has root, even if the file exist
        if copy_has_root(file_source, file_target):
            print_success("Copy {}".format(file_target))
        else:
            print_error("Error force copying to {}".format(file_target))
            return False

    print()
    return True


# --------------------------------------------------------------------
# Scan diff
# --------------------------------------------------------------------


def get_files_different_arbo(root_source, root_destination):
    """
    Scan directory and for each file check if the root counterpart is the same.
    """
    diff_files = []

    for dir_name, _, file_list in os.walk(root_source):
        for filename in file_list:
            # Get relative dir from dotfiles root
            relative_dir = os.path.relpath(dir_name, root_source)
            # Add file name and handle "." (with normpath)
            relative_file = os.path.normpath(os.path.join(relative_dir, filename))

            # Create absolutes paths
            source = os.path.join(root_source, relative_file)
            destination = os.path.join(root_destination, relative_file)

            # Compare diff
            try:
                if not filecmp.cmp(source, destination):
                    diff_files.append(os.path.join("/", relative_file))
            except FileNotFoundError:
                diff_files.append(os.path.join("/", relative_file))

    return diff_files


# --------------------------------------------------------------------
# Git
# --------------------------------------------------------------------


def git_clone(url, destination):
    return exec_command(["git", "clone", "--recursive", url, destination])


def git_fetch(destination):
    return exec_command(
        [
            "git",
            "--work-tree=" + destination,
            "--git-dir=" + destination + "/.git",
            "fetch",
            "origin",
            "master",
        ]
    )


def git_pull(destination):
    return exec_command(
        [
            "git",
            "--work-tree=" + destination,
            "--git-dir=" + destination + "/.git",
            "pull",
            "--recurse-submodules",
            "origin",
            "master",
        ]
    )


def git_changelog(destination):
    """Get changelog from git commits"""
    p = Popen(
        [
            "git",
            "--work-tree=" + destination,
            "--git-dir=" + destination + "/.git",
            "log",
            "--oneline",
            "HEAD..origin/master",
        ],
        stdout=PIPE,
        stderr=PIPE,
    )
    changelog, errors = p.communicate()
    if p.returncode != 0:
        print_error(errors.decode("UTF-8"))
        return []
    else:
        return changelog.decode("UTF-8").strip().split("\n")


def git_version(destination):
    """Get current commit"""
    p = Popen(
        [
            "git",
            "--work-tree=" + destination,
            "--git-dir=" + destination + "/.git",
            "rev-parse",
            "HEAD",
        ],
        stdout=PIPE,
        stderr=PIPE,
    )
    version, errors = p.communicate()
    if p.returncode != 0:
        print_error(errors.decode("UTF-8"))
        return False
    else:
        return version.decode("UTF-8")


def git_clone_or_update_dotfiles(dotfilesurl, dotfilespath, restarted=False):
    """Clone or update dotfiles"""
    print_header("Dotfiles updated" if restarted else "Dotfiles")

    if not os.path.exists(dotfilespath):
        print_info("Clone {}".format(dotfilespath))
        # dotfiles directory doesn't exist? Clone it
        git_clone(dotfilesurl, dotfilespath)

    else:
        # Get previous commit
        dot_version_prev = git_version(dotfilespath)

        # Update
        print_info("Update {}".format(dotfilespath))
        # Fetch
        git_fetch(dotfilespath)
        # Build changelog
        for line in git_changelog(dotfilespath):
            if line:
                print_success(line)
        # Pull
        git_pull(dotfilespath)

        # Get next commit
        dot_version_next = git_version(dotfilespath)
        if dot_version_prev != dot_version_next:
            # Restart current script if version change
            os.execl(
                sys.executable, sys.executable, sys.argv[0], "--restart", *sys.argv[1:]
            )


# --------------------------------------------------------------------
# Main
# --------------------------------------------------------------------


def launch(dotfilespath, restarted, root):
    hostname = socket.gethostname()

    # Requirements
    check_requirements()

    # Self update
    if check_network():
        git_clone_or_update_dotfiles(
            "https://github.com/silvus/dotfiles.git", dotfilespath, restarted
        )

    # Make symlinks
    print_header("Symlinks apps")
    if symlink_arbo(os.path.join(dotfilespath, "app"), os.path.expanduser("~")):
        # Host specifics app files
        if os.path.isdir(os.path.join(dotfilespath, "app_{}".format(hostname))):
            print_header("Symlinks {} specifics apps".format(hostname))
            symlink_arbo(
                os.path.join(dotfilespath, "app_{}".format(hostname)),
                os.path.expanduser("~"),
            )

        if x_is_installed():
            print_header("Symlinks desktop apps")
            symlink_arbo(
                os.path.join(dotfilespath, "appdesktop"), os.path.expanduser("~")
            )

            # Host specifics desktop app files
            if os.path.isdir(
                os.path.join(dotfilespath, "appdesktop_{}".format(hostname))
            ):
                print_header("Symlinks {} specifics desktop apps".format(hostname))
                symlink_arbo(
                    os.path.join(dotfilespath, "appdesktop_{}".format(hostname)),
                    os.path.expanduser("~"),
                )

            # Reload .Xresources
            if shutil.which("xrdb"):
                # Assure DISPLAY is set if launched from SSH
                os.environ["DISPLAY"] = ":0"
                exec_command(["xrdb", os.path.expanduser("~/.Xresources")])

        # Check if approot files are different
        approot_files = get_files_different_arbo(
            os.path.join(dotfilespath, "approot"), "/"
        )
        if approot_files:
            if root:
                print_header("Copy root files")
                copy_files_has_root(
                    os.path.join(dotfilespath, "approot"), approot_files
                )
            else:
                print_header("Difference in root files (no --root argument)")
                for approot_file in approot_files:
                    print_warning("Diff in file {}".format(approot_file))

        # Temporary: Migrate dotfiles_custom to new version
        if os.path.exists(os.path.expanduser("~/.dotfiles_custom")):
            print_header("Migrate ~/.dotfiles_custom to ~/.dotfiles/custom")
            shutil.move(
                os.path.expanduser("~/.dotfiles_custom"),
                os.path.join(dotfilespath, "custom"),
            )

        # Generate ~/.dotfiles/custom files if not exists
        print_header("Generate {}/custom files".format(os.path.basename(dotfilespath)))
        copy_arbo(
            os.path.join(dotfilespath, "custom_templates"),
            os.path.join(dotfilespath, "custom"),
        )

        print()


def init_cli_arg():
    parser = argparse.ArgumentParser(prog="dotfiles")
    parser.add_argument(
        "-p",
        "--path",
        help="Dotfiles base path. Default ~/.dotfiles",
        default=os.path.expanduser("~/.dotfiles"),
    )
    parser.add_argument(
        "--restart", help=argparse.SUPPRESS, action="store_true", default=False
    )
    parser.add_argument(
        "-r", "--root", help=argparse.SUPPRESS, action="store_true", default=False
    )

    return parser.parse_args()


def main():
    # Parse args
    args = init_cli_arg()

    try:
        launch(args.path, args.restart, args.root)

    except KeyboardInterrupt:
        print_error("Aborting...")
        sys.exit(1)

    sys.exit(0)


if __name__ == "__main__":
    sys.exit(main())
